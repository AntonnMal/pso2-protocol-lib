// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace packetlib
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "packetlib_ffi";



        [DllImport(__DllName, EntryPoint = "get_api_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint get_api_version();

        [DllImport(__DllName, EntryPoint = "get_protocol_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint get_protocol_version();

        /// <summary>Creates a new packet worker.</summary>
        [DllImport(__DllName, EntryPoint = "new_worker", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PacketWorker* new_worker(PacketType packet_type, SerializedFormat serde_format);

        /// <summary>Destroys a packet worker.</summary>
        [DllImport(__DllName, EntryPoint = "free_worker", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_worker(PacketWorker* _worker);

        /// <summary>Sets a new packet type.</summary>
        [DllImport(__DllName, EntryPoint = "set_packet_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_packet_type(PacketWorker* worker, PacketType packet_type);

        /// <summary>Sets a new serde format.</summary>
        [DllImport(__DllName, EntryPoint = "set_serde_format", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_serde_format(PacketWorker* worker, SerializedFormat format);

        /// <summary>Checks if the specified serde format is supported.</summary>
        [DllImport(__DllName, EntryPoint = "serde_supported", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool serde_supported(SerializedFormat serde_format);

        /// <summary>Parses packet data and returns a fat pointer to the serialized packet or a null pointer if an error occurred.  # Safety The returned pointer is only valid until the next data-returning function call. If the returned array is empty, the pointer might be non-null but still invalid. This is not considered an error.</summary>
        [DllImport(__DllName, EntryPoint = "parse_packet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DataBuffer parse_packet(PacketWorker* worker, byte* data_ptr, nuint size);

        /// <summary>Deserializes packet and returns a fat pointer to the packet data or a null pointer if an error occured.  # Safety The returned pointer is only valid until the next data-returning function call. If the returned array is empty, the pointer might be non-null but still invalid. This is not considered an error.</summary>
        [DllImport(__DllName, EntryPoint = "create_packet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DataBuffer create_packet(PacketWorker* worker, byte* data_ptr, nuint size);

        /// <summary>Returns a pointer to a UTF-8-encoded zero-terminated error string or a null pointer if no error occurred.  # Safety The returned pointer is only valid until the next failable function call.</summary>
        [DllImport(__DllName, EntryPoint = "get_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* get_error(PacketWorker* worker);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct DataBuffer
    {
        public byte* ptr;
        public nuint size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PacketWorker
    {
    }


    internal enum PacketType : uint
    {
        NGS,
        Classic,
        NA,
        JP,
        Vita,
        Raw,
    }

    internal enum SerializedFormat : uint
    {
        JSON,
        MessagePack,
        MessagePackNamed,
    }


}
    